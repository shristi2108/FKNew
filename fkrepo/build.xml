<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

   <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="./ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	
    <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
    <target name="test">
      <!-- Upload the contents of the "mypkg" package -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="mypkg" rollbackOnError="true"/>
      <mkdir dir="retrieveOutput"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="MyPkg"/>
    </target>

	
	<!--<target name="validate">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="${sf.FolderValidate}" pollWaitMillis="10000" maxPoll="5000" checkOnly="true"/>
	</target>-->
	
	
	
    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
      <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target name="retrievePkg">
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target name="deployUnpackaged">
      <sf:deploy username="${sf.username1}" password="${sf.password1}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="retrieveUnpackaged" rollbackOnError="true"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target name="deployZip" depends="proxy">
      <sf:deploy username="${sf.username1}" password="${sf.password1}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" pollWaitMillis="1000" rollbackOnError="true"/> <!-- zipFile="${sf.zipFile}"-->
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy serverurl="${sf.serverurl}" username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" deployRoot="codepkg" rollbackOnError="true">  <!--testLevel="RunSpecifiedTests"
      	 <runTest>SampleDeployClass</runTest>  -->
      </sf:deploy>
    </target>
	
	
	
	<target name="deployProfile" depends="proxy">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy username="${sf.username1}" password="${sf.password1}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="POC" rollbackOnError="true">  <!--testLevel="RunSpecifiedTests"
      	 <runTest>SampleDeployClass</runTest>  -->
      </sf:deploy>
    </target>
	
	
	
	<!-- ***********************************************************-->
	
	<target name="DeployBit">
    <sf:deploy
            username="${sf.username1}"
           password="${sf.password1}"
            serverurl="${sf.serverurl}"
            deployRoot="${Sandbox2.retrieveTarget}"
             />  <!--runAllTests="true" -->
  </target>
  <target name="retrieveBit">
      <sf:retrieve username="${sf.username}"
                   password="${sf.password}"
                   serverurl="${sf.serverurl}"
                   retrieveTarget="Bit"
                   unpackaged="Bit/package.xml"/>
        <echo message="Commiting all changes with message ${gt.commitMessage}" />
        <git command="add" dir="${sf.gitDirectory}">
            <args>
                <arg value="." />
            </args>
        </git>
        <git command="commit" dir="${sf.gitDirectory}">
            <args>
                <arg value="-am ${gt.commitMessage}" />
            </args>
        </git>
    </target>
    <macrodef name="git">
        <attribute name="command" />
        <attribute name="dir" />
        <element name="args" optional="true" />
        <sequential>
            <echo message="Executing Command in folder @{dir}" />
            <echo message="git @{command}" />
            <exec executable="git" dir="@{dir}">
               <arg value="@{command}" />
                <args/>
            </exec>
        </sequential>
    </macrodef>
	
	
	<!-- ***********************************************************-->
	
	
	
	 <!-- Shows deploying code with no TestLevel sepcified -->
    <target name="deployCodeNoTestLevelSpecified">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"/>
    </target>
	
	<!-- Shows deploying code and running tests only within the org namespace -->
	<target name="deployCodeRunLocalTests">
	  <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"  testlevel="RunLocalTests"/>
	</target>
	
    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployCode" depends="proxy">
      <sf:deploy 
	  username="${sf.username1}" password="${sf.password1}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="removecodepkg"/>
    </target>

	
	
	<target name="retrieveProfile" depends="proxy">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve 
	  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="POC" unpackaged="POC/package.xml"/>
    </target>
	
	
	<target name="retrieveMath" depends="proxy">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve 
	  username="${sf.username}"
	  password="${sf.password}"
	  sessionId="${sf.sessionId}" 
	  serverurl="${sf.serverurl}" 
	  maxPoll="${sf.maxPoll}" 
	  retrieveTarget="NewFolder" 
	  unpackaged="NewFolder/package.xml"/>
    </target>
	
    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode" depends="proxy">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve 
	  username="${sf.username}"
	  password="${sf.password}"
	  sessionId="${sf.sessionId}" 
	  serverurl="${sf.serverurl}" 
	  maxPoll="${sf.maxPoll}" 
	  retrieveTarget="codepkg" 
	  unpackaged="codepkg/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
      <!-- Upload the contents of the "codepkg" package, running all tests -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" checkOnly="true"/>
    </target>
	
	<!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
	<target name="quickDeploy">
	  <sf:deployRecentValidation  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>
	</target>
	
	<!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
	<target name="cancelDeploy">
	  <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>
	</target>

	<target name="validate">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" pollWaitMillis="10000" maxPoll="5000" checkOnly="false" runAllTests="true" testLevel="RunSpecifiedTests">
		<runTest>TestApexClass</runTest>
	<runTest>TestApexClass1</runTest>


	</sf:deploy>
	</target>
	
	<!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
      <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>
    </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}"/>
    </target>
	
	
	
	<target name="RemoveFromPackage" depends="proxy">
	<!-- Here you can add fail statements to check required parameters -->
		
	<!-- Comment out object from package -->
	<property name="RxToken" value="&lt;members&gt;${MemberToRemove}&lt;/members&gt;"/>
	<replace file="POC\package.xml"
			token="${RxToken}" 
			value="&lt;!--${RxToken}--&gt;" />

	<!-- Remove file(s) from folder (PackageDir property already populated) -->
	<!-- Note: append * to file names for cases like XX.page + XX.page-meta.xml -->
	<delete>
		<fileset dir="POC\objects" includes="${FilesToRemove}*"/>
	</delete>
	</target>


	<target name="RemoveObjectListFromPackage" depends="proxy">
	<!-- Here you can add fail statements to check required parameters -->

	<for list="${ObjectList}" param="Object" trim="true">
		<sequential>
			<antcall target="RemoveFromPackage">
				<param name="MemberToRemove" value="@{Object}"/>
				<param name="FolderName" value="objects"/>
				<param name="FilesToRemove" value="@{Object}.object"/>
			</antcall>
		</sequential>
	</for>
	</target>


	<target name="Deploy_TEST" depends="proxy">

	<!-- Remove unwanted metadata before deploying -->
	<antcall target="RemoveObjectListFromPackage">
		<param name="ObjectList" value="Account,Contact"/>
	</antcall>

	<!-- Deploy to target org -->
	<sf:deploy	username="${sf.username}" password="${sf.password}"
				serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" 
				deployRoot="POC" 
				checkOnly="true" 
			>
			</sf:deploy>
	</target>	
				<!--testLevel="RunSpecifiedTests"
				rollbackOnError="true">

				<runTest>MyClassTest</runTest>-->
	
	
	<target name="proxy">
        <property name="proxy.host" value="" />
        <property name="proxy.port" value="" />
        <!--<property name="proxy.user" value="UserName" />
        <property name="proxy.pwd" value="Password" /> -->
        <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/> <!--proxyuser="${proxy.user}" proxypassword="${proxy.pwd}" -->
    </target>

</project>

<!--	NoTestRun�No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial organizations. This test level is the default for development environments.
RunSpecifiedTests�Only the tests that you specify in the runTests option are run. Code coverage requirements differ from the default coverage requirements when using this test level. Each class and trigger in the deployment package must be covered by the executed tests for a minimum of 75% code coverage. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.
RunLocalTests�All tests in your organization are run, except the ones that originate from installed managed packages. This test level is the default for production deployments.
RunAllTestsInOrg�All tests are run. The tests include all tests in your organization, including tests of managed packages

-->